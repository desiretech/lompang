//
//  Lompang.h
//  Lompang
//
//  Created by Zhongcai Ng on 1/9/14.
//  Copyright (c) 2014 lompang. All rights reserved.
//

#import <Foundation/Foundation.h>

@protocol LompangDelegate <NSObject>
@required

-(void)socketConnected:(NSDictionary *)dict;
// Delegate method when connected.
// Response dict will contain autogenerated username of socket.

-(void)socketDisconnected;
// Delegate method when disconnected.

-(void)socketReceivedErr:(NSDictionary *)dict;
// Delegate method when encountered error.
// Read error message for details.

-(void)socketRegistered:(NSDictionary *)dict;
// Delegate method when registered for push notifications.
// Response dict will contain APNS token string

-(void)socketUnregistered;
// Delegate method when unregistered for push notifications.

-(void)socketReceivedDict:(NSDictionary *)dict;
// Delegate method when receive 'user' or 'post' packages.
// Timestamp on packages are UNIX timestamps.
// Timestamp= 0 indicates user is currently online.

@end

@interface Lompang: NSObject

@property (nonatomic, weak) id delegate;

-(void)connectToAccount:(NSString *)acct WithToken:(NSString *)token;
// Connect to LompangSDK backend with email and token string.
// If do not have credentials, please follow instructions on our Github page to obtain one

-(void)disconnect;
// Disconnect from LompangSDK

-(void)update:(NSMutableDictionary *)userload;
// Attach a custom payload onto onto user.

-(void)registerApns:(NSData *)deviceToken;
// Register for push notifications.
// Call this method when receive deviceToken in didRegisterForRemoteNotificationsWithDeviceToken delegate method.

-(void)unregisterApns;
// Unregister for push notifications

-(void)join:(NSString *)group;
// Join a group.
// Even when disconnected, a user never leaves a group, unless explicitly instructed to by an 'unjoin' command.
// When user is reconnected, user is immediately reassociated with any groups that user has joined previously.
// Other users and posts currently in the associated group will automatically be pushed to the user.
// New presence of user will also be automatically broadcasted to other users in the associated group.

-(void)unjoin:(NSString *)group;
// Leave a group.
// Presence (or lack of it) will be broadcasted to all currently in the group.

-(void)listen:(NSString *)group;
// Silently listens to a group.
// Presence is not broadcasted anyone.

-(void)unlisten:(NSString *)group;
// Stop listening to a group

-(void)post:(NSString *)pid Pidload:(NSMutableDictionary *)pidload To:(NSString *)group;
// Post a message with 'pid' as unique identifier and 'pidload' as custom payload to 'group'.
// Users in the group will receive the custom payload, 'pidload'.
// Very important that developer specifies a unique 'pid' identifier for the post.
// If duplicated pid, payload will be overwritten on top of the previous.
// Can use this method for peer or group chatting.

-(void)unpost:(NSString *)pid;
// Remove the post with unique 'pid' identifier.
// Once intended receipient has received the message, call 'unpost' to remove it from the backend
// This is so that subsequent visitors to the group will not receive the message again

-(void)notify:(NSString *)message Group:(NSString *)group;
// Sends out a Apple Push notification message with '1' as badge.
// Developer needs to manually amend applicationIconBadgeNumber to zero when all messages are read

@end